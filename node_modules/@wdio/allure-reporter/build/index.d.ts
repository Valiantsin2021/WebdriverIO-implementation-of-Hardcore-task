/// <reference types="node" />
import WDIOReporter, { SuiteStats, HookStats, RunnerStats, TestStats, BeforeCommandArgs, AfterCommandArgs, CommandArgs } from '@wdio/reporter';
import { AddAttachmentEventArgs, AddDescriptionEventArgs, AddEnvironmentEventArgs, AddFeatureEventArgs, AddIssueEventArgs, AddLabelEventArgs, AddSeverityEventArgs, AddStoryEventArgs, AddTestIdEventArgs, AllureReporterOptions, Status } from './types';
declare class AllureReporter extends WDIOReporter {
    private _allure;
    private _capabilities;
    private _isMultiremote?;
    private _config?;
    private _lastScreenshot?;
    private _options;
    private _consoleOutput;
    private _originalStdoutWrite;
    private _addConsoleLogs;
    constructor(options?: AllureReporterOptions);
    registerListeners(): void;
    onRunnerStart(runner: RunnerStats): void;
    onSuiteStart(suite: SuiteStats): any;
    onSuiteEnd(suite: SuiteStats): any;
    onTestStart(test: TestStats | HookStats): any;
    setCaseParameters(cid: string | undefined): void;
    getLabels({ tags }: SuiteStats): {
        name: string;
        value: string;
    }[];
    onTestPass(): any;
    onTestFail(test: TestStats | HookStats): void;
    onTestSkip(test: TestStats): void;
    onBeforeCommand(command: BeforeCommandArgs): void;
    onAfterCommand(command: AfterCommandArgs): void;
    onHookStart(hook: HookStats): false | undefined;
    onHookEnd(hook: HookStats): false | undefined;
    addLabel({ name, value }: AddLabelEventArgs): false | undefined;
    addStory({ storyName }: AddStoryEventArgs): false | undefined;
    addFeature({ featureName }: AddFeatureEventArgs): false | undefined;
    addSeverity({ severity }: AddSeverityEventArgs): false | undefined;
    addIssue({ issue }: AddIssueEventArgs): false | undefined;
    addTestId({ testId }: AddTestIdEventArgs): false | undefined;
    addEnvironment({ name, value }: AddEnvironmentEventArgs): false | undefined;
    addDescription({ description, descriptionType }: AddDescriptionEventArgs): false | undefined;
    addAttachment({ name, content, type }: AddAttachmentEventArgs): false | undefined;
    startStep(title: string): false | undefined;
    endStep(status: Status): false | undefined;
    addStep({ step }: any): false | undefined;
    addArgument({ name, value }: any): false | undefined;
    isAnyTestRunning(): any;
    isScreenshotCommand(command: CommandArgs): boolean;
    dumpJSON(name: string, json: object): void;
    attachScreenshot(): void;
    /**
     * Assign feature to test
     * @name addFeature
     * @param {(string)} featureName - feature name or an array of names
     */
    static addFeature: (featureName: string) => void;
    /**
     * Assign label to test
     * @name addLabel
     * @param {string} name - label name
     * @param {string} value - label value
     */
    static addLabel: (name: string, value: string) => void;
    /**
     * Assign severity to test
     * @name addSeverity
     * @param {string} severity - severity value
     */
    static addSeverity: (severity: string) => void;
    /**
     * Assign issue id to test
     * @name addIssue
     * @param {string} issue - issue id value
     */
    static addIssue: (issue: string) => void;
    /**
     * Assign TMS test id to test
     * @name addTestId
     * @param {string} testId - test id value
     */
    static addTestId: (testId: string) => void;
    /**
     * Assign story to test
     * @name addStory
     * @param {string} storyName - story name for test
     */
    static addStory: (storyName: string) => void;
    /**
     * Add environment value
     * @name addEnvironment
     * @param {string} name - environment name
     * @param {string} value - environment value
     */
    static addEnvironment: (name: string, value: string) => void;
    /**
     * Assign test description to test
     * @name addDescription
     * @param {string} description - description for test
     * @param {string} descriptionType - description type 'text'\'html'\'markdown'
     */
    static addDescription: (description: string, descriptionType: string) => void;
    /**
     * Add attachment
     * @name addAttachment
     * @param {string} name         - attachment file name
     * @param {*} content           - attachment content
     * @param {string=} mimeType    - attachment mime type
     */
    static addAttachment: (name: string, content: string | Buffer | object, type: string) => void;
    /**
     * Start allure step
     * @name startStep
     * @param {string} title - step name in report
     */
    static startStep: (title: string) => void;
    /**
     * End current allure step
     * @name endStep
     * @param {StepStatus} [status='passed'] - step status
     */
    static endStep: (status?: Status) => void;
    /**
     * Create allure step
     * @name addStep
     * @param {string} title - step name in report
     * @param {Object} [attachmentObject={}] - attachment for step
     * @param {string} attachmentObject.content - attachment content
     * @param {string} [attachmentObject.name='attachment'] - attachment name
     * @param {string} [attachmentObject.type='text/plain'] - attachment type
     * @param {string} [status='passed'] - step status
     */
    static addStep: (title: string, { content, name, type }?: any, status?: Status) => void;
    /**
     * Add additional argument to test
     * @name addArgument
     * @param {string} name - argument name
     * @param {string} value - argument value
     */
    static addArgument: (name: string, value: string) => void;
}
export default AllureReporter;
export { AllureReporterOptions };
export * from './types';
declare global {
    namespace WebdriverIO {
        interface ReporterOption extends AllureReporterOptions {
        }
    }
}
//# sourceMappingURL=index.d.ts.map