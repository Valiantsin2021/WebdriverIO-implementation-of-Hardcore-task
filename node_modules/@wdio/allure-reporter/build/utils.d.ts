import { HookStats, TestStats } from '@wdio/reporter';
import type { Options } from '@wdio/types';
import CompoundError from './compoundError';
import type { Status } from './types';
import AllureReporter from './index.js';
/**
 * Get allure test status by TestStat object
 * @param test {Object} - TestStat object
 * @param config {Object} - wdio config object
 * @private
 */
export declare const getTestStatus: (test: TestStats | HookStats, config?: Options.Testrunner) => Status;
/**
 * Check is object is empty
 * @param object {Object}
 * @private
 */
export declare const isEmpty: (object: any) => boolean;
/**
 * Is mocha beforeEach / afterEach hook
 * @param title {String} - hook title
 * @returns {boolean}
 * @private
 */
export declare const isMochaEachHooks: (title: string) => boolean;
/**
 * Is mocha beforeAll / afterAll hook
 * @param title {String} - hook title
 * @returns {boolean}
 * @private
 */
export declare const isMochaAllHooks: (title: string) => boolean;
/**
 * Call reporter
 * @param {string} event  - event name
 * @param {Object} msg - event payload
 * @private
 */
export declare const tellReporter: (event: string, msg?: any) => void;
/**
 * Properly format error from different test runners
 * @param {Object} test - TestStat object
 * @returns {Object} - error object
 * @private
 */
export declare const getErrorFromFailedTest: (test: TestStats | HookStats) => Error | CompoundError | undefined;
/**
 * Substitute task id to link template
 * @param {string} template - link template
 * @param {string} id - task id
 * @returns {string} - link after substitution
 * @private
 */
export declare const getLinkByTemplate: (template: string | undefined, id: string) => string;
/**
 *
 * @param {string} logs - logs to be attached
 * @param {string} allure - allure report object
 * @private
 */
export declare const attachConsoleLogs: (logs: string | undefined, allure: AllureReporter['_allure']) => void;
//# sourceMappingURL=utils.d.ts.map