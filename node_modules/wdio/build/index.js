"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const chalk_1 = __importDefault(require("chalk"));
const commander_1 = require("commander");
const semver_1 = __importDefault(require("semver"));
const utils_1 = require("./utils");
const constants_1 = require("./constants");
let pkg = { version: 'unknown' };
try {
    pkg = JSON.parse(fs_1.default.readFileSync(__dirname + '/../package.json').toString());
}
catch (e) { /* ignore */ }
let projectName;
let useYarn;
function run(operation = createWebdriverIO) {
    /**
     * print program ASCII art
     */
    if (!(process.argv.includes('--version') || process.argv.includes('-v'))) {
        console.log(constants_1.ASCII_ROBOT, constants_1.PROGRAM_TITLE);
    }
    const program = new commander_1.Command('wdio')
        .version(`v${pkg.version}`, '-v, --version')
        .arguments('[project]')
        .usage(`${chalk_1.default.green('[project]')} [options]`)
        .action(name => (projectName = name))
        .option('--use-yarn', 'Use Yarn package manager to install packages', false)
        .option('--verbose', 'print additional logs')
        .option('--yes', 'will fill in all config defaults without prompting', false)
        .option('--dev', 'Install all packages as into devDependencies', true)
        .allowUnknownOption()
        .on('--help', () => console.log())
        .parse(process.argv);
    if (typeof projectName === 'undefined' && !fs_1.default.existsSync('package.json')) {
        console.error('There is no package.json in current directory!\n');
        console.log('To create WebdriverIO in a new project pass in a directory name:\n' +
            `  ${chalk_1.default.cyan(program.name())} ${chalk_1.default.green('/path/to/project/directory')}\n` +
            '\n' +
            'For example:\n' +
            `  ${chalk_1.default.cyan(program.name())} ${chalk_1.default.green('./tests')}\n` +
            '\n' +
            'To update current project to include WebdriverIO packages, run this script in a directory with package.json\n' +
            `Run ${chalk_1.default.cyan(`${program.name()} --help`)} to see all options.`);
        process.exit(1);
    }
    return operation(program.opts()).then(() => console.log(`To start the test, run: ${chalk_1.default.cyan('$ npm run')} ${chalk_1.default.green(program.name())}`));
}
exports.run = run;
async function createWebdriverIO(opts) {
    const ewd = process.cwd();
    const unsupportedNodeVersion = !semver_1.default.satisfies(process.version, '>=12');
    if (unsupportedNodeVersion) {
        console.log(chalk_1.default.yellow(constants_1.UNSUPPORTED_NODE_VERSION));
    }
    useYarn = opts.useYarn && await (0, utils_1.shouldUseYarn)();
    let root = path_1.default.join(process.cwd(), projectName || '');
    if (!await (0, utils_1.exists)(root)) {
        await fs_1.default.promises.mkdir(root, { recursive: true });
    }
    process.chdir(root);
    root = process.cwd();
    const currentDir = process.cwd();
    const pkgJsonPath = path_1.default.join(currentDir, 'package.json');
    if (!useYarn && !(0, utils_1.checkThatNpmCanReadCwd)()) {
        process.exit(1);
    }
    console.log(`\nCreating WebdriverIO project in ${chalk_1.default.bold(root)}\n`);
    const deps = ['@wdio/cli'];
    await install(deps.flat(), root, opts);
    console.log('\nFinished installing packages.');
    console.log('\nRunning WDIO CLI Wizard...');
    await (0, utils_1.runProgram)('npx', ['wdio', 'config', ...(useYarn ? ['--yarn'] : []), ...(opts.yes ? ['--yes'] : [])]);
    console.log('Adding scripts to package.json');
    const isUsingTypescript = await (0, utils_1.exists)('wdio.conf.ts');
    const pkgJson = require(pkgJsonPath);
    if (!pkgJson.scripts) {
        pkgJson.scripts = {};
    }
    pkgJson.scripts['wdio'] = `wdio run wdio.conf.${isUsingTypescript ? 'ts' : 'js'}`;
    await fs_1.default.promises.writeFile(pkgJsonPath, JSON.stringify(pkgJson, null, 4));
    console.log(`\nðŸ¤– Successfully setup project at ${root} ðŸŽ‰`);
    if (root != ewd) {
        console.log(`\n${chalk_1.default.yellow('âš ')} First, change the directory via: ${chalk_1.default.cyan('$ cd')} ${chalk_1.default.green(root)}`);
    }
}
function install(dependencies, root, opts) {
    const logLevel = opts.verbose ? 'trace' : 'error';
    let command;
    let args;
    console.log('Installing packages: ', chalk_1.default.green(dependencies.join(', ')), '\n');
    if (useYarn) {
        command = 'yarnpkg';
        args = ['add', ...(opts.dev ? ['-D'] : []), '--exact', ...dependencies];
        // Explicitly set cwd() to work around issues like
        // https://github.com/facebook/create-react-app/issues/3326.
        // Unfortunately we can only do this for Yarn because npm support for
        // equivalent --prefix flag doesn't help with this issue.
        // This is why for npm, we run checkThatNpmCanReadCwd() early instead.
        args.push('--cwd', root);
    }
    else {
        command = 'npm';
        args = ['install', opts.dev ? '--save-dev' : '--save', '--loglevel', logLevel, ...dependencies];
    }
    return (0, utils_1.runProgram)(command, args);
}
